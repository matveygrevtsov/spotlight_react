{"version":3,"sources":["images/circle.svg","images/rectangle.svg","images/triangle.svg","images/triangle2.svg","Spotlight.ts","utils/images.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["spotlightRange","SpotlightItem","props","color","canvas","image","itemWidth","wrapX0","wrapY0","wrapWidth","wrapHeight","context","t","x","y","widthPx","heightPx","wrapWidthPx","wrapHeightPx","wrapX0Px","wrapY0Px","this","getContext","calculatePx","getX","getY","width","height","Math","cos","sin","animationSpeed","incrementTime","centerX","centerY","gradientRadius","min","gradient","createRadialGradient","addColorStop","fillStyle","getGradient","fillRect","ceil","save","drawImage","renderSpotlight","restore","move","SpotlightAnimator","items","requestAnimation","render","timestamp","clearRect","forEach","item","requestAnimationFrame","setCanvasSize","window","addEventListener","config","push","innerWidth","innerHeight","cancelAnimationFrame","loadImage","src","Promise","resolve","reject","img","Image","onload","onerror","err","loadImages","arrayOfSrc","a","length","all","map","Spotlight","images","canvasRef","useRef","useEffect","current","spotlightAnimator","then","imgs","addItem","start","destroy","ref","App","image1","image2","image3","image4","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f87e7c7e.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/circle.d99772db.svg\";","export default __webpack_public_path__ + \"static/media/rectangle.6aed71ab.svg\";","export default __webpack_public_path__ + \"static/media/triangle.940a81ff.svg\";","export default __webpack_public_path__ + \"static/media/triangle2.da6afcc4.svg\";","const FPS = 60\nconst periodMs = 1 / FPS\nconst spotlightPower = 1\nconst animationSpeed = 500\nconst spotlightRange = 0.2\nconst spotlightRotationSpeed = 2\n\n// TODO: Удалить эту функцию и все её вызовы перед продакшеном\nconst plotBorder = (\n  canvas: HTMLCanvasElement,\n  color: string,\n  x0: number,\n  y0: number,\n  x1: number,\n  y1: number,\n): void => {\n  const context = canvas.getContext('2d')\n  if (!context) {\n    return\n  }\n  context.beginPath()\n  context.strokeStyle = color\n  context.moveTo(Math.min(x0, x1), Math.min(y0, y1))\n  context.lineTo(Math.max(x0, x1), Math.min(y0, y1))\n  context.lineTo(Math.max(x0, x1), Math.max(y0, y1))\n  context.lineTo(Math.min(x0, x1), Math.max(y0, y1))\n  context.lineTo(Math.min(x0, x1), Math.min(y0, y1))\n  context.stroke()\n}\n\ninterface SpotlightItemProps {\n  image: HTMLImageElement\n  itemWidth: number\n  wrapX0: number\n  wrapY0: number\n  wrapWidth: number\n  wrapHeight: number\n  canvas: HTMLCanvasElement\n  color: string\n}\n\ninterface SpotlightItemConfig {\n  image: HTMLImageElement\n  itemWidth: number\n  wrapX0: number\n  wrapY0: number\n  wrapWidth: number\n  wrapHeight: number\n}\n\ninterface SpotlightAnimatorProps {\n  canvas: HTMLCanvasElement\n  color: string\n}\n\nclass SpotlightItem {\n  private readonly color: string\n  private readonly canvas: HTMLCanvasElement\n  private readonly image: HTMLImageElement\n  private readonly itemWidth: number\n  private readonly wrapX0: number\n  private readonly wrapY0: number\n  private readonly wrapWidth: number\n  private readonly wrapHeight: number\n  private readonly context: CanvasRenderingContext2D | null\n  private t: number\n  private x: number\n  private y: number\n  private widthPx: number\n  private heightPx: number\n  private wrapWidthPx: number\n  private wrapHeightPx: number\n  private wrapX0Px: number\n  private wrapY0Px: number\n\n  constructor(props: SpotlightItemProps) {\n    this.color = props.color\n    this.image = props.image\n    this.itemWidth = props.itemWidth\n    this.wrapX0 = props.wrapX0\n    this.wrapY0 = props.wrapY0\n    this.wrapWidth = props.wrapWidth\n    this.wrapHeight = props.wrapHeight\n    this.canvas = props.canvas\n    this.context = props.canvas.getContext('2d')\n    this.t = 0\n    this.widthPx = 0\n    this.heightPx = 0\n    this.wrapHeightPx = 0\n    this.wrapWidthPx = 0\n    this.wrapX0Px = 0\n    this.wrapY0Px = 0\n    this.calculatePx()\n    this.x = this.getX(this.t)\n    this.y = this.getY(this.t)\n  }\n\n  private calculatePx() {\n    this.wrapX0Px = (this.canvas.width * this.wrapX0) / 100\n    this.wrapY0Px = (this.canvas.height * this.wrapY0) / 100\n    this.wrapHeightPx = (this.wrapHeight / 100) * this.canvas.height\n    this.wrapWidthPx = (this.wrapWidth / 100) * this.canvas.width\n    this.widthPx = (this.itemWidth / 100) * this.canvas.width\n    this.heightPx =\n      (((this.itemWidth / this.image.width) * this.image.height) / 100) *\n      this.canvas.width\n    if (this.heightPx > this.wrapHeightPx) {\n      this.heightPx = this.wrapHeightPx\n      this.widthPx = (this.wrapHeightPx * this.image.width) / this.image.height\n    }\n  }\n\n  private getX(t: number) {\n    return (\n      ((this.wrapWidthPx - this.widthPx) / 2) * (Math.cos(t) + 1) +\n      this.wrapX0Px\n    )\n  }\n\n  private getY(t: number) {\n    return (\n      ((this.wrapHeightPx - this.heightPx) / 2) * (Math.sin(t) + 1) +\n      this.wrapY0Px\n    )\n  }\n\n  private incrementTime() {\n    this.t += (animationSpeed * periodMs) / 1000\n  }\n\n  private move() {\n    this.incrementTime()\n    this.calculatePx()\n    this.x = this.getX(this.t)\n    this.y = this.getY(this.t)\n  }\n\n  private getGradient(): CanvasGradient | string {\n    if (!this.context) {\n      return this.color\n    }\n    const centerX = this.x + this.widthPx / 2\n    const centerY = this.y + this.heightPx / 2\n    const gradientRadius = Math.min(this.widthPx, this.heightPx) / 2\n    const gradient = this.context.createRadialGradient(\n      centerX +\n        gradientRadius *\n          spotlightRange *\n          Math.cos(this.t * spotlightRotationSpeed),\n      centerY +\n        gradientRadius *\n          spotlightRange *\n          Math.sin(this.t * spotlightRotationSpeed),\n      gradientRadius,\n      centerX +\n        gradientRadius *\n          spotlightRange *\n          Math.cos(this.t * spotlightRotationSpeed),\n      centerY +\n        gradientRadius *\n          spotlightRange *\n          Math.sin(this.t * spotlightRotationSpeed),\n      0,\n    )\n    gradient.addColorStop(0, this.color)\n    gradient.addColorStop(1 - spotlightPower, this.color)\n    gradient.addColorStop(1, 'transparent')\n    return gradient\n  }\n\n  private renderSpotlight() {\n    if (!this.context) {\n      return\n    }\n    this.context.fillStyle = this.getGradient()\n    this.context.fillRect(\n      this.x - 1,\n      this.y - 1,\n      Math.ceil(this.widthPx) + 1,\n      Math.ceil(this.heightPx) + 1,\n    )\n  }\n\n  public render() {\n    if (!this.context) {\n      return\n    }\n    this.context.save()\n    this.context.drawImage(\n      this.image,\n      this.x,\n      this.y,\n      this.widthPx,\n      this.heightPx,\n    )\n    this.renderSpotlight()\n    this.context.restore()\n    /*\n    plotBorder(this.canvas, 'red', this.x, this.y, this.x + this.widthPx, this.y + this.heightPx);\n    plotBorder(\n      this.canvas,\n      'red',\n      this.wrapX0Px,\n      this.wrapY0Px,\n      this.wrapX0Px + this.wrapWidthPx,\n      this.wrapY0Px + this.wrapHeightPx,\n    );\n    */\n    this.move()\n  }\n}\n\nexport default class SpotlightAnimator {\n  private readonly canvas: HTMLCanvasElement\n  private readonly color: string\n  private readonly items: SpotlightItem[]\n  private readonly context: CanvasRenderingContext2D | null\n  private requestAnimation: number\n\n  constructor(props: SpotlightAnimatorProps) {\n    this.canvas = props.canvas\n    this.color = props.color\n    this.items = []\n    this.context = props.canvas.getContext('2d')\n    this.requestAnimation = 0\n    this.setCanvasSize()\n    window.addEventListener('resize', () => this.setCanvasSize())\n  }\n  public addItem(config: SpotlightItemConfig) {\n    this.items.push(\n      new SpotlightItem({\n        canvas: this.canvas,\n        image: config.image,\n        itemWidth: config.itemWidth,\n        wrapX0: config.wrapX0,\n        wrapY0: config.wrapY0,\n        wrapWidth: config.wrapWidth,\n        wrapHeight: config.wrapHeight,\n        color: this.color,\n      }),\n    )\n  }\n\n  private setCanvasSize() {\n    this.canvas.width = window.innerWidth\n    this.canvas.height = window.innerHeight\n  }\n\n  private render = (timestamp: number): void => {\n    if (!this.context) {\n      return\n    }\n    this.context.clearRect(0, 0, this.canvas.width, this.canvas.height)\n    this.items.forEach((item) => item.render())\n    this.requestAnimation = requestAnimationFrame(this.render)\n  }\n\n  public start() {\n    this.requestAnimation = requestAnimationFrame(this.render)\n  }\n\n  public destroy() {\n    cancelAnimationFrame(this.requestAnimation)\n  }\n}\n","export const loadImage = (src: string): Promise<HTMLImageElement> =>\n  new Promise((resolve, reject) => {\n    const img: HTMLImageElement = new Image();\n    img.src = src;\n    img.onload = () => resolve(img);\n    img.onerror = (err: string | Event) => reject(err);\n  });\n\nexport const loadImages = async (arrayOfSrc: string[] | undefined): Promise<HTMLImageElement[]> => {\n  if (!arrayOfSrc || arrayOfSrc.length === 0) {\n    return [];\n  }\n  return Promise.all(arrayOfSrc.map(loadImage));\n};","import React, { useEffect, useRef } from 'react'\nimport './App.css'\nimport image1 from './images/circle.svg';\nimport image2 from './images/rectangle.svg';\nimport image3 from './images/triangle.svg';\nimport image4 from './images/triangle2.svg';\nimport SpotlightAnimator from './Spotlight'\nimport { loadImages } from './utils/images'\n\ninterface Props {\n  images?: string[]\n}\n\nconst Spotlight: React.FC<Props> = ({ images }) => {\n  const canvasRef = useRef<HTMLCanvasElement>(null)\n  useEffect(() => {\n    if (canvasRef.current) {\n      const spotlightAnimator = new SpotlightAnimator({\n        canvas: canvasRef.current,\n        color: '#111111',\n      })\n      loadImages(images).then((imgs) => {\n        spotlightAnimator.addItem({\n          image: imgs[0],\n          itemWidth: 9,\n          wrapX0: 18,\n          wrapY0: 4,\n          wrapWidth: 9,\n          wrapHeight: 30,\n        })\n        spotlightAnimator.addItem({\n          image: imgs[1],\n          itemWidth: 20,\n          wrapX0: 27,\n          wrapY0: 7,\n          wrapWidth: 28,\n          wrapHeight: 23,\n        })\n        spotlightAnimator.addItem({\n          image: imgs[0],\n          itemWidth: 20,\n          wrapX0: 55,\n          wrapY0: 3,\n          wrapWidth: 28,\n          wrapHeight: 30,\n        })\n        spotlightAnimator.addItem({\n          image: imgs[2],\n          itemWidth: 40,\n          wrapX0: 30,\n          wrapY0: 34,\n          wrapWidth: 40,\n          wrapHeight: 66,\n        })\n        spotlightAnimator.addItem({\n          image: imgs[0],\n          itemWidth: 5,\n          wrapX0: 20,\n          wrapY0: 70,\n          wrapWidth: 10,\n          wrapHeight: 20,\n        })\n        spotlightAnimator.addItem({\n          image: imgs[3],\n          itemWidth: 10,\n          wrapX0: 70,\n          wrapY0: 70,\n          wrapWidth: 10,\n          wrapHeight: 20,\n        })\n        spotlightAnimator.start()\n      })\n      return () => spotlightAnimator.destroy()\n    }\n  }, [images])\n  return <canvas ref={canvasRef} />\n}\n\nfunction App() {\n  return <Spotlight images={[image1, image2, image3, image4]} />\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}